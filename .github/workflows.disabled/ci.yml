name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r autopiloot/requirements.txt
        # Install development dependencies for testing
        pip install pytest pytest-cov pytest-mock ruff mypy types-PyYAML types-requests

    - name: Check tool filenames (snake_case)
      run: |
        cd autopiloot
        ./scripts/check_tool_filenames_snake_case.sh

    - name: Lint with ruff
      run: |
        cd autopiloot
        ruff check . --output-format=github
        ruff format --check .

    - name: Type check with mypy
      run: |
        cd autopiloot
        mypy --config-file=pyproject.toml . || true  # Allow failures for now

    - name: Run unit tests
      env:
        # Mock environment variables for testing
        OPENAI_API_KEY: "test-key-openai"
        ASSEMBLYAI_API_KEY: "test-key-assemblyai"
        YOUTUBE_API_KEY: "test-key-youtube"
        SLACK_BOT_TOKEN: "test-token-slack"
        ZEP_API_KEY: "test-key-zep"
        GCP_PROJECT_ID: "test-project-123"
        GOOGLE_APPLICATION_CREDENTIALS: "/tmp/test-credentials.json"
        GOOGLE_DRIVE_FOLDER_ID_TRANSCRIPTS: "test-folder-transcripts"
        GOOGLE_DRIVE_FOLDER_ID_SUMMARIES: "test-folder-summaries"
      run: |
        cd autopiloot
        # Create mock credentials file for testing
        echo '{"type": "service_account", "project_id": "test-project"}' > /tmp/test-credentials.json
        # Set PYTHONPATH and run tests
        PYTHONPATH=. python -m unittest discover tests -v

    - name: Run tests with coverage
      if: matrix.python-version == '3.11'
      env:
        # Same mock environment as above
        OPENAI_API_KEY: "test-key-openai"
        ASSEMBLYAI_API_KEY: "test-key-assemblyai"
        YOUTUBE_API_KEY: "test-key-youtube"
        SLACK_BOT_TOKEN: "test-token-slack"
        ZEP_API_KEY: "test-key-zep"
        GCP_PROJECT_ID: "test-project-123"
        GOOGLE_APPLICATION_CREDENTIALS: "/tmp/test-credentials.json"
        GOOGLE_DRIVE_FOLDER_ID_TRANSCRIPTS: "test-folder-transcripts"
        GOOGLE_DRIVE_FOLDER_ID_SUMMARIES: "test-folder-summaries"
      run: |
        cd autopiloot
        echo '{"type": "service_account", "project_id": "test-project"}' > /tmp/test-credentials.json
        PYTHONPATH=. python -m pytest tests/ --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: autopiloot/coverage.xml
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        cd autopiloot
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt

    - name: Check for known vulnerabilities
      run: |
        cd autopiloot
        safety check --json > safety-report.json || true
        safety check

    - name: Scan for secrets
      run: |
        cd autopiloot
        # Simple grep for common secret patterns
        ! grep -r -E "(api_key|password|secret|token)\s*=\s*['\"][^'\"]{8,}" . --include="*.py" || exit 1
        ! grep -r -E "-----BEGIN (RSA )?PRIVATE KEY-----" . || exit 1
        ! grep -r -E "[A-Za-z0-9+/]{40,}" . --include="*.py" | grep -v "test" || exit 1

  docs-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check for required documentation
      run: |
        cd autopiloot
        # Check for essential documentation files
        test -f README.md || (echo "Missing README.md" && exit 1)
        test -f CHANGELOG.md || (echo "Missing CHANGELOG.md" && exit 1)
        test -f docs/ENVIRONMENT.md || (echo "Missing ENVIRONMENT.md" && exit 1)
        test -f .gitignore || (echo "Missing .gitignore" && exit 1)
        
        # Check .env is in .gitignore
        grep -q "\.env" .gitignore || (echo ".env not in .gitignore" && exit 1)
        
        # Check no .env files are committed
        ! find . -name ".env*" -not -path "./venv/*" -not -name ".env.template" | grep . || (echo "Found .env files in repo" && exit 1)

    - name: Validate task files
      run: |
        cd autopiloot
        # Check that all task files have proper YAML frontmatter
        find planning/tasks -name "*.mdc" -exec grep -l "^---$" {} \; | wc -l > /tmp/tasks_with_yaml
        find planning/tasks -name "*.mdc" | wc -l > /tmp/total_tasks
        if [ "$(cat /tmp/tasks_with_yaml)" != "$(cat /tmp/total_tasks)" ]; then
          echo "Some task files missing YAML frontmatter"
          exit 1
        fi