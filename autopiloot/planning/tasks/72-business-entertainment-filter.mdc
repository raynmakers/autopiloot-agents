---
description: "Introduce business vs entertainment classification gate before summarization; flag entertainment in Firestore and skip Zep"
globs: []
alwaysApply: false
---

# INSTRUCTIONS — READ THIS FIRST WHEN CREATING NEW TASKS

This file is a single, self-contained TASK for an AI agent. One task = one file.
Follow the steps below when creating new tasks.

1. Name your file: place under `./tasks/` and use kebab-case, e.g., `tasks/add-bar-chart.md`.
2. Fill the frontmatter (above) completely. Keep `title`, `status`, and `owner` accurate.
3. Use information-dense keywords throughout (exact file paths, function signatures, type names, constants, CLI flags).
4. Define types first if adding new data structures. Reference those types by exact name in later steps.
5. Order your steps so later steps explicitly reference earlier artifacts by name (files, types, functions).
6. Keep scope tight: this task should be completable independently. If it's large, split into multiple task files and add them to `dependencies`.
7. Acceptance criteria must be testable and unambiguous. Include file paths for tests and example CLI/API usage.
8. Context plan must list the files to add to the model's context at the start (mark dep files read-only) and which files must exist at the end.
9. Testing strategy use primarily integration tests, calling real APIs. No useless unit tests that just test the properties of the class. No tests for front end.

---

id: "TASK-0072"
title: "Add business vs entertainment classification gate in summarizer"
status: "planned"
priority: "P1"
labels: ["feature", "summarizer", "firestore", "zep", "llm"]
dependencies: [
"planning/tasks/69-tests-orchestrator-policy-and-digest-edges.mdc",
"planning/tasks/71-handle-to-channel-id-mapping.mdc"
]
created: "2025-10-07"

# 1) High-Level Objective

Before generating a summary, determine if a transcript is business-relevant or entertainment. If entertainment, skip summarization, set a Firestore flag, and prevent Zep storage.

# 2) Background / Context

We currently summarize all transcripts. To reduce cost and noise, we should classify content intent first and avoid summarizing or storing entertainment content.

# 3) Assumptions & Constraints

- ASSUMPTION: Classification can be done via LLM using light prompt (fast, low cost) or heuristics.
- Constraint: Agency Swarm v1.0.2 compliance; tools inherit `agency_swarm.tools.BaseTool` and return JSON strings.
- Constraint: No secrets in code; env via `config/env_loader.py`. Config in `config/settings.yaml`.
- Constraint: Firestore updates must be atomic and idempotent with audit-friendly fields.

# 4) Dependencies (Other Tasks or Artifacts)

- `agents/autopiloot/summarizer_agent/tools/generate_short_summary.py`
- `agents/autopiloot/summarizer_agent/tools/process_summary_workflow.py`
- `agents/autopiloot/summarizer_agent/tools/store_short_in_zep.py`
- `agents/autopiloot/transcriber_agent/tools/save_transcript_record.py`
- `agents/autopiloot/config/settings.yaml`
- Tests under `agents/autopiloot/tests/` for summarizer tools and workflows

# 5) Context Plan

**Beginning (add to model context):**

- agents/autopiloot/summarizer*agent/tools/generate_short_summary.py *(read-only)\_
- agents/autopiloot/summarizer*agent/tools/process_summary_workflow.py *(read-only)\_
- agents/autopiloot/summarizer*agent/tools/store_short_in_zep.py *(read-only)\_
- agents/autopiloot/config/settings.yaml _(read-only)_
- agents/autopiloot/transcriber*agent/tools/save_transcript_record.py *(read-only)\_
- agents/autopiloot/tests/test*process_summary_workflow.py *(read-only)\_

**End state (must exist after completion):**

- agents/autopiloot/summarizer_agent/tools/classify_business_value.py
- agents/autopiloot/tests/test_classify_business_value.py
- agents/autopiloot/tests/test_process_summary_workflow_entertainment.py
- Updated: agents/autopiloot/summarizer_agent/tools/process_summary_workflow.py (invoke classification first; skip summary/Zep when entertainment; set Firestore flag)
- Updated: agents/autopiloot/config/settings.yaml (llm.tasks.summarizer_classify_business)

# 6) Low-Level Steps (Ordered, information-dense)

1. Extend configuration (`agents/autopiloot/config/settings.yaml`)

   - Add under `llm.tasks.summarizer_classify_business`:
     - `model: "gpt-4.1"` (default)
     - `temperature: 0.1`
     - `max_output_tokens: 200`
     - `thresholds: { business_min_score: 0.6 }` (for optional scoring use)

2. Create tool: `agents/autopiloot/summarizer_agent/tools/classify_business_value.py`

   - Class: `ClassifyBusinessValue(BaseTool)`
   - Fields (Pydantic Field):
     - `transcript_text: str` (required)
     - `title: Optional[str] = None`
     - `channel_id: Optional[str] = None`
     - `video_id: Optional[str] = None`
   - `run()` behavior:
     - Load LLM config from settings with task override; fallback to default LLM config.
     - Prompt LLM to return a strict JSON with: `{ "is_business": bool, "confidence": float, "reason": str }`.
     - Return JSON string with that structure, plus a stable `prompt_id` and token usage if available.

3. Update workflow: `agents/autopiloot/summarizer_agent/tools/process_summary_workflow.py`

   - Invoke `ClassifyBusinessValue` before any summarization.
   - If result `is_business == false` (entertainment):
     - Write Firestore flag on transcript document: `is_entertainment: true`, `business_relevance: "entertainment"`, `summary_skipped_reason: "entertainment"`, and `business_confidence: <confidence>` using SERVER_TIMESTAMP for `updated_at`.
     - Short-circuit: Do not call `generate_short_summary`, `store_short_in_zep`, or `save_summary_record(_enhanced)`.
     - Return a JSON response indicating `skipped: true` and reason.
   - Else proceed with existing summarization pipeline unchanged.

4. Tests

   - File: `agents/autopiloot/tests/test_classify_business_value.py`
     - Covers: strict JSON parsing, boolean correctness, confidence bounds, error handling.
   - File: `agents/autopiloot/tests/test_process_summary_workflow_entertainment.py`
     - Mocks LLM classification to entertainment; asserts:
       - Firestore transcript doc updated with flags.
       - No calls to `store_short_in_zep`.
       - No summary record saved.
       - Response signals `skipped: true`.

5. Documentation
   - Update `agents/autopiloot/docs/agents_overview.md` and `.../reliability_implementation.md` with the new gate and skip behavior.

# 7) Types & Interfaces (if applicable)

```python
from typing import TypedDict

class ClassificationResult(TypedDict):
    is_business: bool
    confidence: float  # 0.0 - 1.0
    reason: str
    prompt_id: str
```

# 8) Acceptance Criteria

- Classification tool returns strict JSON with `is_business`, `confidence`, and `reason` fields.
- When entertainment, workflow updates Firestore with flags and skips summarization and Zep storage.
- When business, existing summarization + Zep storage path remains unchanged.
- Tests pass for both entertainment and business paths.
- Coverage ≥ 80% for the new tool and ≥ 80% on updated workflow file; HTML report updated.

# 9) Testing Strategy

- Mock LLM calls; import real source via direct file import ensuring coverage tools execute code.
- Validate Firestore updates using mocks and assert exact field changes.
- Generate coverage reports and ensure `coverage/autopiloot/index.html` updated.
- Final module run:
  - `coverage run --source=agents/autopiloot -m unittest discover agents/autopiloot/tests -v`
  - `coverage html --directory=agents/autopiloot/coverage --include="agents/autopiloot/*"`
  - `coverage report --include="agents/autopiloot/*" --show-missing`

# 10) Notes / Links

- Aligns with cost controls and data quality goals; reduces noise in Zep.
- Integrates cleanly with existing summarizer workflow files.
