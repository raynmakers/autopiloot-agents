---
description: "Implement SubmitAssemblyAIJob (70-min cap, cost estimate)"
globs: []
alwaysApply: false
---

id: "TASK-TRN-0021"
title: "Build SubmitAssemblyAIJob tool"
status: "planned"
priority: "P1"
labels: ["transcriber", "assemblyai"]
dependencies: ["TASK-TRN-0020"]
created: "2025-09-11"

# 1) High-Level Objective

Submit a transcription job to AssemblyAI and return job id and estimated cost.

# 2) Background / Context

PRD Agent B tools.

# 3) Assumptions & Constraints

- Reject videos longer than 70 minutes.
- Supports optional webhook callback; if provided, AssemblyAI will POST completion to our endpoint.
- Env: may use `ASSEMBLYAI_WEBHOOK_SECRET` to verify webhook signatures.

# 4) Dependencies

- files: agents/autopiloot/prd.mdc

# 5) Context Plan

Beginning:

- agents/autopiloot/prd.mdc _(read-only)_

End state:

- agents/autopiloot/transcriber/tools/SubmitAssemblyAIJob.py

# 6) Low-Level Steps

1. Inputs: `remote_url`, `metadata`, optional `webhook_url`.
2. If `metadata.duration_sec > 4200` (70 min), return validation error.
3. Submit via AssemblyAI SDK:
   - Include `webhook_url` if provided.
   - Store `job_id` and estimated cost.
4. Return `{ job_id, estimated_cost_usd }`.

# 7) Acceptance Criteria

- Returns `{ job_id, estimated_cost_usd }`.
- When `webhook_url` is supplied, AssemblyAI delivers callbacks to that URL (verified in staging).
- If `webhook_url` is not supplied, downstream polling (Task 22) remains the path.

# 10) Types & Interfaces

```python
from typing import TypedDict, Optional

class SubmitAssemblyAIJobRequest(TypedDict):
    remote_url: str
    metadata: dict  # { video_id: str, duration_sec: int }
    webhook_url: Optional[str]

class SubmitAssemblyAIJobResponse(TypedDict):
    job_id: str
    estimated_cost_usd: float
```
