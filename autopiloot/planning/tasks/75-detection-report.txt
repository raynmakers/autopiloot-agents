================================================================================
TASK-0075: Environment and Config Loading Pattern Detection
================================================================================

1. Direct os.getenv Usage: 19 occurrences
--------------------------------------------------------------------------------

core/
  sheets.py:20
    → return os.getenv(name, default)
  slack_utils.py:18
    → return os.getenv(name, default)
  time_utils.py:16
    → return os.getenv(name, default)

scripts/
  detect_env_config_patterns.py:6
    → 1. Direct os.getenv usage (excluding config/env_loader.py which is the source of truth)
  detect_env_config_patterns.py:14
    → --fix-agent-tools    Automatically fix os.getenv in agent tools (dry run by default)
  detect_env_config_patterns.py:71
    → if "os.getenv" in line and not line.strip().startswith("#"):
  detect_env_config_patterns.py:109
    → report_lines.append(f"1. Direct os.getenv Usage: {len(os_getenv_matches)} occurrences")
  detect_env_config_patterns.py:129
    → report_lines.append("  ✓ No direct os.getenv usage found!")
  detect_env_config_patterns.py:176
    → report_lines.append(f"  - os.getenv usage: {total_os_getenv}")
  detect_env_config_patterns.py:181
    → report_lines.append("Priority 1: Fix os.getenv Usage")
  detect_env_config_patterns.py:185
    → report_lines.append("    Before: os.getenv('API_KEY')")

tests/orchestrator_tools/
  test_orchestrate_rag_ingestion.py:68
    → mock_env_loader.get_required_env_var = MagicMock(side_effect=lambda key, desc='': os.getenv(key))

tests/strategy_tools/
  test_synthesize_strategy_playbook_comprehensive.py:306
    → with patch('os.getenv', return_value=None):  # No API key
  test_synthesize_strategy_playbook_comprehensive.py:328
    → @patch('os.getenv')
  test_synthesize_strategy_playbook_comprehensive.py:358
    → @patch('os.getenv')

tests/summarizer_tools/
  test_zep_firestore_dedup.py:48
    → mock_env_loader.get_required_env_var = MagicMock(side_effect=lambda key, desc='': os.getenv(key))

transcriber_agent/tools/
  save_transcript_record.py:199
    → api_key = os.getenv("ASSEMBLYAI_API_KEY")
  submit_assemblyai_job.py:141
    → api_key = os.getenv("ASSEMBLYAI_API_KEY")
  submit_assemblyai_job.py:167
    → webhook_secret = os.getenv("ASSEMBLYAI_WEBHOOK_SECRET")


2. sys.path Manipulation: 19 occurrences
--------------------------------------------------------------------------------

Agent Tools (3 files):
  Recommendation: Use PYTHONPATH=. or package structure improvements
  Example: transcriber_agent/tools/save_transcript_record.py:199

Test Files (5 files):
  Recommendation: Use pytest with proper PYTHONPATH configuration
  Example: tests/strategy_tools/test_synthesize_strategy_playbook_comprehensive.py:306

Other Files (11 files):
  core/sheets.py:20
  core/slack_utils.py:18
  core/time_utils.py:16
  scripts/detect_env_config_patterns.py:6
  scripts/detect_env_config_patterns.py:14


================================================================================
SUMMARY & RECOMMENDATIONS
================================================================================

Total Issues: 38
  - os.getenv usage: 19
  - sys.path manipulation: 19

Priority 1: Fix os.getenv Usage
  Estimated effort: 1-2 hours
  Action: Replace with get_required_env_var() or get_optional_env_var()
  Pattern:
    Before: os.getenv('API_KEY')
    After:  get_required_env_var('API_KEY', 'Description')

Priority 2: Address sys.path Manipulation
  Estimated effort: 4-8 hours
  Recommendation: Consider as separate task
  Options:
    1. Always use PYTHONPATH=. (documented in CLAUDE.md)
    2. Improve package structure with proper __init__.py files
    3. Use relative imports where appropriate
