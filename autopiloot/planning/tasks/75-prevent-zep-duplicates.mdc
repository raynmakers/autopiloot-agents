---
description: "Prevent duplicate data in Zep by deterministic keys and safe upserts"
globs: []
alwaysApply: false
---

# INSTRUCTIONS — READ THIS FIRST WHEN CREATING NEW TASKS

This file is a single, self-contained TASK for an AI agent. One task = one file.
Follow the steps below when creating new tasks.

1. Name your file: place under `./tasks/` and use kebab-case, e.g., `tasks/add-bar-chart.md`.
2. Fill the frontmatter (above) completely. Keep `title`, `status`, and `owner` accurate.
3. Use information-dense keywords throughout (exact file paths, function signatures, type names, constants, CLI flags).
4. Define types first if adding new data structures. Reference those types by exact name in later steps.
5. Order your steps so later steps explicitly reference earlier artifacts by name (files, types, functions).
6. Keep scope tight: this task should be completable independently. If it's large, split into multiple task files and add them to `dependencies`.
7. Acceptance criteria must be testable and unambiguous. Include file paths for tests and example CLI/API usage.
8. Context plan must list the files to add to the model's context at the start (mark dep files read-only) and which files must exist at the end.
9. Testing strategy use primarily integration tests, calling real APIs. No useless unit tests that just test the properties of the class. No tests for front end.

---

id: "TASK-ZEP-0075"
title: "Prevent duplicate data in Zep (deterministic external_id + upsert)"
status: "planned"
priority: "P1"
labels: ["zep", "deduplication", "rag", "summarizer", "data-integrity"]
dependencies: []
created: "2025-10-10"

# 1) High-Level Objective

Eliminate duplicate Zep documents by using deterministic external IDs and pre-insert existence checks, while preserving the ability to update existing entries safely.

# 2) Background / Context

Summaries are stored in Zep for GraphRAG. Repeated runs (same `video_id`/`prompt_version`) or minor content changes can cause duplicates. We need robust dedup: a stable key and upsert behavior.

# 3) Assumptions & Constraints

- ASSUMPTION: Zep SDK supports creating documents with a client-provided `external_id` and querying by metadata.
- Constraint: Maintain Agency Swarm v1.0.2 standards; tools return JSON strings and use Pydantic validation.
- Constraint: No breaking changes to existing workflows; default behavior becomes dedup-safe.

# 4) Dependencies (Other Tasks or Artifacts)

- agents/autopiloot/summarizer*agent/tools/store_short_in_zep.py *(read-only)\_
- agents/autopiloot/summarizer*agent/tools/save_summary_record_enhanced.py *(read-only)\_
- agents/autopiloot/summarizer*agent/tools/process_summary_workflow.py *(read-only)\_
- agents/autopiloot/config/settings.yaml _(read-only)_

# 5) Context Plan

Beginning (add to model context):

- agents/autopiloot/summarizer*agent/tools/store_short_in_zep.py *(read-only)\_
- agents/autopiloot/summarizer*agent/tools/save_summary_record_enhanced.py *(read-only)\_
- agents/autopiloot/summarizer*agent/tools/process_summary_workflow.py *(read-only)\_
- agents/autopiloot/config/settings.yaml _(read-only)_

End state (must exist after completion):

- agents/autopiloot/summarizer_agent/tools/store_short_in_zep.py (updated with dedup)
- agents/autopiloot/tests/summarizer_tools/test_zep_dedup_integration.py
- agents/autopiloot/tests/summarizer_tools/test_zep_dedup_error_handling.py
- agents/autopiloot/coverage/summarizer_agent/index.html (updated)

# 6) Low-Level Steps (Ordered, information-dense)

1. Define dedup strategy and configuration

   - In `settings.yaml`, add (or ensure) section:
     ```yaml
     zep:
       dedup:
         enabled: true
         key_fields: ["video_id", "prompt_version"] # default; can include "title" if needed
         normalize_whitespace: true
         include_sha256_body: true # hash of normalized bullets+key_concepts for stronger identity
     ```
   - Document defaults and the exact normalization steps (trim, collapse spaces, lowercase if configured).

2. Compute deterministic external_id

   - In `store_short_in_zep.py`, build a stable `external_id` string:
     - Base key: `video_id + ":" + prompt_version`
     - If `include_sha256_body`, append `":" + sha256(normalized_summary_body)`
   - Store `external_id` and `dedup_key` in Zep metadata for easy querying.

3. Implement upsert behavior

   - Before insert: query Zep by `external_id` (preferred) or `metadata.dedup_key`.
   - If exists: update document content/metadata instead of creating a new one (preserve Zep `id`).
   - If not exists: create with the computed `external_id`.
   - Return JSON string with `{ "action": "created|updated", "external_id": str, "zep_doc_id": str }`.

4. Backward compatible workflow integration

   - Ensure `process_summary_workflow.py` and `save_summary_record_enhanced.py` handle updated response schema.
   - Keep previous fields intact (e.g., `zep_doc_id`) to avoid breaking downstream references.

5. Tests — integration-style

   - File: `agents/autopiloot/tests/summarizer_tools/test_zep_dedup_integration.py`
   - Use direct file import pattern and context-scoped mocking for Zep client.
   - Cases:
     - First insert creates document (action=created).
     - Second insert with same `video_id` + `prompt_version` updates (action=updated) and returns same `zep_doc_id`.
     - With `include_sha256_body=true`, content change results in updated (same external_id if body hash included in metadata but stable key stays consistent based on configuration).

6. Tests — error handling

   - File: `agents/autopiloot/tests/summarizer_tools/test_zep_dedup_error_handling.py`
   - Validate failures: Zep query error, insert/update error, invalid settings (e.g., empty key_fields).
   - Ensure JSON error responses are consistent and meaningful.

7. Coverage generation (MANDATORY)
   - Commands (documentation):
     - `export PYTHONPATH=.`
     - `coverage run --source=agents/autopiloot/summarizer_agent -m unittest discover agents/autopiloot/tests/summarizer_tools -p "test_zep_dedup*.py" -v`
     - `coverage report --include="agents/autopiloot/summarizer_agent/*" --show-missing`
     - `coverage html --include="agents/autopiloot/summarizer_agent/*" -d agents/autopiloot/coverage/summarizer_agent`

# 7) Types & Interfaces (if applicable)

```python
# Return JSON (string) example on success
{
  "action": "created",  # or "updated"
  "external_id": "<stable-key>",
  "zep_doc_id": "<uuid>"
}
```

# 8) Acceptance Criteria

- Dedup is enabled by default via `settings.yaml` and can be configured.
- `store_short_in_zep.py` computes and uses a deterministic `external_id` and performs upsert (create/update).
- Re-running with identical inputs does not create a new Zep document (same `zep_doc_id`).
- Tests pass (integration + error handling) and demonstrate dedup behavior.
- Coverage HTML generated at `agents/autopiloot/coverage/summarizer_agent/index.html` with ≥ 80% coverage for changed code paths.

# 9) Testing Strategy

- Integration tests mock Zep client; import real tool code with direct file import pattern; no network calls.
- Parameterize tests across different `dedup.key_fields` and `include_sha256_body` settings.
- Validate stability under whitespace/letter-case variations when normalization is enabled.

# 10) Notes / Links

- Consider future migration to fully idempotent upsert API if Zep SDK exposes it directly.
- Keep dedup logic centralized to avoid drift across tools; prefer shared helpers if multiple tools write to Zep.
