---
description: "Automated maintenance for embeddings refresh and OpenSearch reindex"
globs: []
alwaysApply: false
---

id: "TASK-RAG-0072K"
title: "Maintenance playbooks for hybrid RAG"
status: "completed"
priority: "P3"
labels: ["maintenance", "ops", "docs"]
dependencies: []
created: "2025-10-12"
completed: "2025-10-13"

# 1) Objective

Provide scripts/runbooks for embeddings refresh, Zep health checks, and OpenSearch reindex.

# 2) Steps

1. Docs in `docs/` for procedures and rollback.
2. CLI scripts or Make targets to trigger maintenance.
3. Safety checks and dry-run modes.

# 3) Acceptance

- Clear, executable procedures with validation steps.

---

# Implementation Summary

## ‚úÖ Deliverables

**Maintenance Scripts**: 3 comprehensive CLI tools with safety features
**Documentation**: Complete maintenance playbook and rollback procedures
**Safety Features**: Dry-run modes, backups, validation, rollback support

### Scripts Created

#### 1. Embeddings Refresh Script
**File**: `scripts/maintenance/refresh_embeddings.py` (~320 lines)

**Features**:
- Dry-run mode for previewing changes
- Batch processing with configurable batch size
- Automatic backup creation before modifications
- Progress tracking and statistics
- Validation after refresh completion
- Error handling with retry logic
- CLI arguments: `--namespace`, `--batch-size`, `--dry-run`

**Usage Examples**:
```bash
# Dry run (preview changes)
python scripts/maintenance/refresh_embeddings.py --dry-run

# Refresh specific namespace
python scripts/maintenance/refresh_embeddings.py --namespace autopiloot-prod

# Use custom batch size
python scripts/maintenance/refresh_embeddings.py --batch-size 50
```

**Key Functions**:
- `list_documents_needing_refresh()` - Identify documents needing update
- `create_backup()` - Backup before modifications
- `refresh_document_embedding()` - Re-embed single document
- `refresh_batch()` - Process documents in batches
- `validate_embeddings()` - Verify refresh completed correctly

#### 2. Zep Health Check Script
**File**: `scripts/maintenance/health_check_zep.py` (~450 lines)

**Features**:
- Comprehensive health validation
- Automatic issue detection
- Fix mode for automatic repair
- Detailed reporting with severity levels
- Export health report to file
- CLI arguments: `--namespace`, `--dry-run`, `--fix`, `--output`

**Health Checks Performed**:
1. ‚úÖ Connectivity - Zep service reachable
2. ‚úÖ Namespace Health - Document count and configuration
3. ‚úÖ Embedding Integrity - Embeddings present and valid
4. ‚úÖ Retrieval Performance - Query latency monitoring
5. ‚úÖ Orphaned Documents - Missing metadata or duplicates

**Usage Examples**:
```bash
# Run health check (dry run)
python scripts/maintenance/health_check_zep.py --dry-run

# Check specific namespace
python scripts/maintenance/health_check_zep.py --namespace autopiloot-prod

# Fix issues automatically
python scripts/maintenance/health_check_zep.py --fix

# Export report to file
python scripts/maintenance/health_check_zep.py --output report.json
```

**Health Status Levels**:
- ‚úÖ Healthy: All checks passed
- ‚ö†Ô∏è Warning: Minor issues detected
- üî∂ Degraded: Multiple issues, performance impacted
- üî¥ Critical: Critical failures, immediate action required

#### 3. OpenSearch Reindex Script
**File**: `scripts/maintenance/reindex_opensearch.py` (~460 lines)

**Features**:
- Zero-downtime reindexing via alias switching
- Batch processing with configurable size
- Document count validation
- Atomic alias switching
- Old index preservation for rollback
- CLI arguments: `--source`, `--target`, `--alias`, `--batch-size`, `--delete-source`

**Usage Examples**:
```bash
# Dry run (preview changes)
python scripts/maintenance/reindex_opensearch.py --source my_index --dry-run

# Reindex to new index
python scripts/maintenance/reindex_opensearch.py --source my_index --target my_index_v2

# Reindex with alias switch (zero downtime)
python scripts/maintenance/reindex_opensearch.py --source my_index --alias my_alias

# Custom batch size
python scripts/maintenance/reindex_opensearch.py --source my_index --batch-size 500
```

**Zero-Downtime Pattern**:
1. Create new index with updated settings
2. Copy documents from source to target in batches
3. Validate document counts and integrity
4. Switch alias to point to new index (atomic operation)
5. Old index preserved for rollback if needed

### Documentation Created

#### 1. RAG Maintenance Playbook
**File**: `docs/maintenance/rag_maintenance_playbook.md` (~500 lines)

**Contents**:
- **Routine Maintenance**: Daily, weekly, monthly tasks
- **Embeddings Refresh**: Complete procedure with validation
- **Zep Health Checks**: Health monitoring and issue resolution
- **OpenSearch Reindexing**: Zero-downtime reindex procedure
- **BigQuery Optimization**: Partition and cost management
- **Performance Monitoring**: Latency, cache, error tracking
- **Troubleshooting Guide**: Common issues and solutions
- **Rollback Procedures**: Quick reference for rollback

**Key Sections**:
- Daily/weekly/monthly maintenance checklists
- Step-by-step procedures for each maintenance operation
- Troubleshooting common issues (high latency, missing embeddings, degraded mode)
- Performance monitoring thresholds and targets
- Backup strategy and retention policies

#### 2. RAG Rollback Procedures
**File**: `docs/maintenance/rag_rollback_procedures.md` (~450 lines)

**Contents**:
- **Rollback Decision Matrix**: When to rollback vs monitor
- **Embeddings Rollback**: Restore from backup after failed refresh
- **OpenSearch Rollback**: Alias switching for instant rollback
- **BigQuery Rollback**: Schema and data restoration
- **Configuration Rollback**: Git-based config revert
- **Cache Rollback**: Clear stale cache data
- **Emergency Rollback**: Complete system failure recovery

**Rollback Time Estimates**:
| Operation | Rollback Time | Downtime | Difficulty |
|-----------|---------------|----------|------------|
| OpenSearch Alias Switch | 1-2 minutes | None | Easy |
| Cache Clear | <1 minute | None | Easy |
| Configuration Revert | 5-10 minutes | None | Easy |
| BigQuery Schema | 15-30 minutes | Partial | Medium |
| Zep Embeddings | 30-60 minutes | Partial | Hard |
| Complete System | 1-2 hours | Full | Hard |

### Safety Features

**All scripts include**:
- ‚úÖ Dry-run mode for previewing changes
- ‚úÖ Backup creation before destructive operations
- ‚úÖ Validation after operations complete
- ‚úÖ Error handling and retry logic
- ‚úÖ Progress tracking and statistics
- ‚úÖ Clear output with status indicators
- ‚úÖ Exit codes for automation/CI integration

**Safety Patterns**:
```bash
# Always dry-run first
python script.py --dry-run

# Review output carefully

# Execute with confidence
python script.py
```

### Maintenance Workflow

**Routine Maintenance Flow**:
```
Daily Automated Checks
  ‚Üì
Weekly Manual Review
  ‚Üì
Health Check All Sources
  ‚Üì
Issues Detected?
  ‚Üì Yes
Run Appropriate Script (dry-run)
  ‚Üì
Review & Validate
  ‚Üì
Execute Script
  ‚Üì
Validate Success
  ‚Üì
Document Results
```

**Emergency Rollback Flow**:
```
Issue Detected
  ‚Üì
Assess Severity
  ‚Üì Critical
Stop All Maintenance
  ‚Üì
Identify Root Cause
  ‚Üì
Execute Rollback
  ‚Üì
Validate Rollback
  ‚Üì
Monitor Recovery
  ‚Üì
Post-Mortem
```

### Integration with Existing Tools

**Observability Integration**:
- Health check results feed into observability metrics
- Error rates trigger automated alerts
- Performance metrics tracked via `trace_hybrid_retrieval.py`

**Configuration Integration**:
- Scripts read from `config/settings.yaml`
- Respect environment variables from `.env`
- Follow existing credential management patterns

**Testing Integration**:
- Maintenance scripts tested with mock data
- Dry-run mode enables safe testing
- Validation functions ensure correctness

## ‚úÖ Acceptance Criteria

1. ‚úÖ **Clear, executable procedures**: 950+ lines of comprehensive documentation
2. ‚úÖ **Validation steps**: All scripts include validation and rollback
3. ‚úÖ **Safety checks**: Dry-run modes and backup creation standard

## üéØ Production Status

**READY FOR PRODUCTION**

### Maintenance Infrastructure
- ‚úÖ 3 comprehensive CLI maintenance scripts
- ‚úÖ Dry-run modes for all operations
- ‚úÖ Automatic backup creation
- ‚úÖ Validation and rollback support
- ‚úÖ 950+ lines of detailed documentation
- ‚úÖ Emergency procedures documented

### Operational Readiness
- ‚úÖ Daily/weekly/monthly maintenance checklists
- ‚úÖ Troubleshooting guides for common issues
- ‚úÖ Rollback procedures with time estimates
- ‚úÖ Safety features and error handling
- ‚úÖ Integration with existing observability

### Documentation Coverage
- ‚úÖ Complete maintenance playbook
- ‚úÖ Detailed rollback procedures
- ‚úÖ Usage examples for all scripts
- ‚úÖ Troubleshooting decision trees
- ‚úÖ Emergency response protocols

**Recommendation**: Maintenance infrastructure is production-ready with comprehensive tooling, detailed procedures, and safety features. All acceptance criteria met.
