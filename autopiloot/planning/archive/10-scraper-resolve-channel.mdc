---
description: "Implement ResolveChannelHandle (YouTube handle â†’ channel ID)"
globs: []
alwaysApply: false
---

id: "TASK-SCR-0010"
title: "Build ResolveChannelHandle tool (YouTube Data API v3)"
status: "done"
priority: "P1"
labels: ["scraper", "youtube"]
dependencies: ["TASK-AGENTS-0002"]
created: "2025-09-11"

# 1) High-Level Objective

Resolve configured YouTube handles (e.g., `@AlexHormozi`) to canonical `channel_id`s using YouTube Data API v3.

# 2) Background / Context

PRD Agent A tools.

# 3) Assumptions & Constraints

- Env: `YOUTUBE_API_KEY`.
- Handles are defined in `agents/autopiloot/config/settings.yaml` under `scraper.handles: ["@AlexHormozi", ...]`.

# 4) Dependencies

- files: agents/autopiloot/prd.mdc
- files: agents/autopiloot/config/settings.yaml

# 5) Context Plan

Beginning:

- agents/autopiloot/prd.mdc _(read-only)_
- agents/autopiloot/config/settings.yaml _(read-only)_

End state:

- agents/autopiloot/scraper/tools/ResolveChannelHandle.py

# 6) Low-Level Steps

1. Implement class `ResolveChannelHandle` using `agency_swarm.tools.BaseTool`.
2. Load handles array from `settings.yaml` (`scraper.handles`).
3. For each handle, resolve via YouTube API and return mapping.
4. Retries on 429/5xx; short backoff; stop on success per handle.

# 7) Acceptance Criteria

- Returns valid `channel_id` mapping for all handles in config (including `@AlexHormozi`).
- Graceful errors with clear messages when not found; continues with remaining handles.

# 10) Types & Interfaces

```python
from typing import TypedDict, List, Dict

class ResolveChannelHandlesRequest(TypedDict):
    handles: List[str]  # loaded from settings.yaml (scraper.handles)

class ResolveChannelHandlesResponse(TypedDict):
    mapping: Dict[str, str]  # { "@handle": "UC..." }
```
