---
description: "Implement Sheets ingestion and per-page YouTube link extraction"
globs: []
alwaysApply: false
---

id: "TASK-SCR-0012"
title: "Build ReadSheetLinks + ExtractYouTubeFromPage"
status: "planned"
priority: "P1"
labels: ["scraper", "sheets"]
dependencies: ["TASK-AGENTS-0002"]
created: "2025-09-11"

# 1) High-Level Objective

Read YouTube links from a single-column Google Sheet and (optionally) extract YouTube URLs from provided pages when needed.

# 2) Background / Context

PRD Sheet backfill.

# 3) Assumptions & Constraints

- Config: Sheet ID from `agents/autopiloot/config/settings.yaml -> sheets`.
- The sheet contains a single column where each row is a YouTube link.

# 4) Dependencies

- files: agents/autopiloot/prd.mdc
- files: agents/autopiloot/config/settings.yaml

# 5) Context Plan

Beginning:

- agents/autopiloot/prd.mdc _(read-only)_

End state:

- agents/autopiloot/scraper/tools/ReadSheetLinks.py
- agents/autopiloot/scraper/tools/ExtractYouTubeFromPage.py

# 6) Low-Level Steps

1. Load Sheet ID from settings; read up to N pending rows from the single link column (default range `Sheet1!A:A`).
2. Validate that each cell contains a YouTube URL; skip invalid.
3. Deduplicate results.

# 7) Acceptance Criteria

- Returns array of `{ video_url }` for valid rows.
- Handles invalid URLs gracefully.

# 10) Types & Interfaces

```python
from typing import TypedDict, List

class ReadSheetLinksRequest(TypedDict):
    sheet_id: str
    range_a1: str  # e.g., "Sheet1!A:A"

class SheetLink(TypedDict):
    video_url: str

class ReadSheetLinksResponse(TypedDict):
    items: List[SheetLink]

class ExtractYouTubeFromPageRequest(TypedDict):
    page_url: str

class ExtractYouTubeFromPageResponse(TypedDict):
    video_urls: List[str]
```
