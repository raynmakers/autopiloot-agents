---
description: "Implement polling, Drive storage, and Firestore record for transcripts"
globs: []
alwaysApply: false
---

id: "TASK-TRN-0022"
title: "Build PollTranscriptionJob, StoreTranscriptToDrive, SaveTranscriptRecord"
status: "planned"
priority: "P1"
labels: ["transcriber", "drive", "firestore"]
dependencies: ["TASK-TRN-0021"]
created: "2025-09-11"

# 1) High-Level Objective

Complete transcription ingestion via two paths: webhook (primary) or polling (fallback), then upload to Drive and persist to Firestore.

# 2) Background / Context

PRD Agent B tools.

# 3) Assumptions & Constraints

- Drive folders via env ids; text and json outputs.
- Webhook requests include a shared secret for verification (e.g., `X-Signature` HMAC or bearer token); reject if verification fails.

# 4) Dependencies

- files: agents/autopiloot/prd.mdc

# 5) Context Plan

Beginning:

- agents/autopiloot/prd.mdc _(read-only)_

End state:

- agents/autopiloot/transcriber/tools/PollTranscriptionJob.py
- agents/autopiloot/transcriber/tools/StoreTranscriptToDrive.py
- agents/autopiloot/transcriber/tools/SaveTranscriptRecord.py
- agents/autopiloot/transcriber/tools/WebhookHandler.py

# 6) Low-Level Steps

1. Webhook path (primary):
   - Create `WebhookHandler` to receive POST from AssemblyAI upon completion.
   - Verify signature using `ASSEMBLYAI_WEBHOOK_SECRET` (or HMAC header); reject on mismatch.
   - Retrieve transcript text/json via SDK if not in payload.
   - Proceed to steps 3 and 4.
2. Polling path (fallback):
   - Implement `PollTranscriptionJob` with exponential backoff, timeout caps.
   - On success, retrieve transcript text/json.
3. Store to Drive:
   - Upload `.txt` and `.json`; return IDs.
4. Save Firestore record:
   - Create/Update `transcripts/{video_id}` with Drive IDs, digest, costs `{ transcription_usd }`, timestamps (UTC).
5. Trigger summarizer:
   - Write event or call agent to start summarization for `video_id`.

# 7) Acceptance Criteria

- Webhook handler accepts valid callbacks and processes successfully end-to-end.
- Polling fallback successfully completes when no webhook is configured or delivery fails.
- Transcript files in Drive and Firestore metadata saved (UTC timestamps).

# 10) Types & Interfaces

```python
from typing import TypedDict, Dict

class PollTranscriptionJobRequest(TypedDict):
    job_id: str

class PollTranscriptionJobResponse(TypedDict):
    transcript_text: str
    transcript_json: dict

class StoreTranscriptToDriveRequest(TypedDict):
    video_id: str
    transcript_text: str
    transcript_json: dict

class StoreTranscriptToDriveResponse(TypedDict):
    drive_id_txt: str
    drive_id_json: str

class SaveTranscriptRecordRequest(TypedDict):
    video_id: str
    drive_ids: dict
    transcript_digest: str
    costs: Dict[str, float]  # { "transcription_usd": float }

class SaveTranscriptRecordResponse(TypedDict):
    transcript_doc_ref: str

class WebhookHandlerRequest(TypedDict):
    headers: Dict[str, str]
    payload: Dict

class WebhookHandlerResponse(TypedDict):
    status: int
    message: str
```

# 11) Firestore Security Rules (MVP)

```firestore
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /transcripts/{videoId} {
      allow read, write: if false;
    }
    match /costs_daily/{date} {
      allow read, write: if false;
    }
  }
}
```
