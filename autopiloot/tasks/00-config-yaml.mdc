---
description: "Create YAML config file for runtime settings (Sheets cap, ranges, etc.)"
globs: []
alwaysApply: false
---

id: "TASK-CFG-0000"
title: "Add settings.yaml configuration and loader"
status: "planned"
priority: "P0"
labels: ["config", "yaml"]
dependencies: []
created: "2025-09-11"

# 1) High-Level Objective

Provide a YAML config at `agents/autopiloot/config/settings.yaml` with values used by tasks (e.g., Sheets daily cap), plus a loader utility.

# 2) Background / Context

Task 03 (Sheets) requires a Google Sheet ID and a global daily limit per channel.

# 3) Assumptions & Constraints

- The YAML file is committed (non-secret). Secrets remain in env.

# 4) Dependencies

- files: agents/autopiloot/prd.mdc
- tasks: agents/autopiloot/tasks/03-google-sheet-flow.mdc

# 5) Context Plan

Beginning:

- agents/autopiloot/prd.mdc _(read-only)_

End state:

- agents/autopiloot/config/settings.yaml
- agents/autopiloot/config/loader.py

# 6) Low-Level Steps

1. Create `agents/autopiloot/config/settings.yaml` with structure:
   ```yaml
   # ID of the Google Sheet used for backfill links
   sheets: "1AbC2defGhIJkLmNoPqRSTuVwxyz0123456789"

   scraper:
     handles:
       - "@AlexHormozi"
     daily_limit_per_channel: 10

   llm:
     default:
       model: "gpt-5-mini"
       temperature: 0.2
     prompts:
       summarizer_short_id: "coach_v1"
     tasks:
       summarizer_generate_short:
         model: "gpt-5-mini"
         temperature: 0.2
         prompt_id: "coach_v1"

   notifications:
     slack:
       channel: "ops-autopiloot"

   budgets:
     transcription_daily_usd: 5
   ```
2. Create `agents/autopiloot/config/loader.py` with function `load_app_config() -> dict` using `yaml.safe_load`.
3. Add minimal validation:
   - `sheets` is a non-empty string (Google Sheet ID)
   - `scraper.daily_limit_per_channel` is int >= 0
   - `llm.default.model` is a non-empty string; `llm.default.temperature` is 0.0–1.0
   - If `llm.tasks.*` present, each task entry has `model` (str) and `temperature` (0.0–1.0)
   - `notifications.slack.channel` is a non-empty string
   - `budgets.transcription_daily_usd` is a positive number

# 7) Acceptance Criteria

- Loader returns a dict with `sheets`, `scraper`, `llm`, `notifications.slack.channel`, and `budgets.transcription_daily_usd`.
- Summarizer and any LLM-using tasks can override model/temperature via `llm.tasks.<task_key>`, falling back to `llm.default` when absent.

# 10) Types & Interfaces

```python
from typing import TypedDict, List, Dict, Optional

class ScraperConfig(TypedDict, total=False):
    handles: List[str]
    daily_limit_per_channel: int

class LLMPrompts(TypedDict, total=False):
    summarizer_short_id: str

class LLMTaskConfig(TypedDict, total=False):
    model: str
    temperature: float
    prompt_id: Optional[str]

class LLMConfig(TypedDict, total=False):
    default: LLMTaskConfig
    prompts: LLMPrompts
    tasks: Dict[str, LLMTaskConfig]

class NotificationsSlackConfig(TypedDict, total=False):
    channel: str

class BudgetsConfig(TypedDict, total=False):
    transcription_daily_usd: float

class AppConfig(TypedDict, total=False):
    sheets: str
    scraper: ScraperConfig
    llm: LLMConfig
    notifications: Dict[str, NotificationsSlackConfig]
    budgets: BudgetsConfig
```
