import os
import json
from typing import Dict, Any, List
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from core.base_tool import BaseTool


class FormatSlackBlocks(BaseTool):
    def __init__(self):
        super().__init__()
    
    def _validate_env_vars(self):
        pass
    
    def run(self, request: Dict[str, Any]) -> Dict[str, Any]:
        items = request.get('items', {})
        
        if not items:
            raise ValueError("items is required")
        
        try:
            blocks = []
            
            if items.get('title'):
                blocks.append({
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": items['title'],
                        "emoji": True
                    }
                })
            
            if items.get('summary'):
                blocks.append({
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": items['summary']
                    }
                })
            
            if items.get('bullets'):
                bullet_text = "\n".join([f"â€¢ {bullet}" for bullet in items['bullets']])
                blocks.append({
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": bullet_text
                    }
                })
            
            if items.get('links'):
                link_elements = []
                for link in items['links']:
                    if isinstance(link, dict) and 'text' in link and 'url' in link:
                        link_elements.append({
                            "type": "button",
                            "text": {
                                "type": "plain_text",
                                "text": link['text'],
                                "emoji": True
                            },
                            "url": link['url']
                        })
                
                if link_elements:
                    blocks.append({
                        "type": "actions",
                        "elements": link_elements[:5]
                    })
            
            if items.get('divider'):
                blocks.append({"type": "divider"})
            
            if items.get('fields'):
                field_elements = []
                for field in items['fields']:
                    if isinstance(field, dict) and 'label' in field and 'value' in field:
                        field_elements.append({
                            "type": "mrkdwn",
                            "text": f"*{field['label']}:*\n{field['value']}"
                        })
                
                if field_elements:
                    blocks.append({
                        "type": "section",
                        "fields": field_elements[:10]
                    })
            
            if items.get('footer'):
                blocks.append({
                    "type": "context",
                    "elements": [
                        {
                            "type": "mrkdwn",
                            "text": items['footer']
                        }
                    ]
                })
            
            if len(json.dumps(blocks)) > 3000:
                blocks = blocks[:5]
                blocks.append({
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": "_Message truncated due to size limits_"
                    }
                })
            
            return {"blocks": blocks}
            
        except Exception as e:
            raise RuntimeError(f"Failed to format Slack blocks: {str(e)}")


if __name__ == "__main__":
    tool = FormatSlackBlocks()
    
    test_request = {
        "items": {
            "title": "Test Alert",
            "summary": "This is a test summary message",
            "bullets": [
                "First bullet point",
                "Second bullet point"
            ],
            "links": [
                {"text": "View Details", "url": "https://example.com"},
                {"text": "Documentation", "url": "https://docs.example.com"}
            ],
            "fields": [
                {"label": "Status", "value": "Active"},
                {"label": "Count", "value": "42"}
            ],
            "footer": "Generated by Autopiloot",
            "divider": True
        }
    }
    
    try:
        result = tool.run(test_request)
        print(f"Success: Created {len(result['blocks'])} blocks")
        print(f"Blocks: {json.dumps(result['blocks'], indent=2)}")
    except Exception as e:
        print(f"Error: {str(e)}")