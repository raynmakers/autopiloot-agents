---
description: Production-Ready Autopiloot Agency Folder Structure
globs:
alwaysApply: true
---

# Autopiloot Agency Folder Structure

## Agency Swarm v1.0.0 Production Architecture

```
autopiloot/
├── agency.py                     # Main AutopilootAgency class with complete agent orchestration
├── agency_manifesto.md           # Shared operational standards and mission
├── requirements.txt              # Production dependencies with agency-swarm>=0.7.2
├── env.template                  # Complete environment variables reference
│
├── scraper_agent/               # ScraperAgent (CEO) - Content Discovery & Orchestration
│   ├── __init__.py              # Package initialization with agent export
│   ├── scraper_agent.py         # Agent definition with ModelSettings and CEO configuration
│   ├── instructions.md          # Discovery workflows and channel management
│   └── tools/                   # 7 production-ready discovery tools
│       ├── __init__.py
│       ├── ResolveChannelHandles.py     # Batch YouTube handle → channel ID resolution
│       ├── ListRecentUploads.py         # Uploads playlist discovery with checkpoints
│       ├── ReadSheetLinks.py            # Google Sheets URL extraction (single column)
│       ├── ExtractYouTubeFromPage.py    # Web page YouTube URL discovery
│       ├── SaveVideoMetadata.py         # Firestore video storage with audit logging
│       ├── EnqueueTranscription.py      # Transcription job queue with duplicate prevention
│       └── RemoveSheetRow.py            # Sheet cleanup with archive-first approach
│
├── transcriber_agent/           # TranscriberAgent - AssemblyAI Processing Pipeline
│   ├── __init__.py
│   ├── transcriber_agent.py     # Agent definition optimized for transcription workflows
│   ├── instructions.md          # AssemblyAI integration and cost management
│   └── tools/                   # 5 complete transcription pipeline tools
│       ├── __init__.py
│       ├── get_video_audio_url.py       # YouTube audio extraction via yt-dlp
│       ├── submit_assemblyai_job.py     # Job submission with cost estimation
│       ├── poll_transcription_job.py    # Exponential backoff polling (60s→120s→240s)
│       ├── store_transcript_to_drive.py # Dual format storage (TXT+JSON) with SHA-256
│       └── save_transcript_record.py    # Atomic Firestore updates with audit logging
│
├── summarizer_agent/            # SummarizerAgent - Business-Focused Content Analysis
│   ├── __init__.py
│   ├── summarizer_agent.py      # Agent definition for coaching-focused summaries
│   ├── instructions.md          # LLM integration and content analysis guidelines
│   └── tools/                   # 8 comprehensive summarization and storage tools
│       ├── __init__.py
│       ├── GenerateShortSummary.py      # GPT-4.1 coaching summaries with adaptive chunking
│       ├── StoreShortInZep.py          # Basic Zep GraphRAG storage
│       ├── StoreShortSummaryToDrive.py # Dual-format Drive storage (JSON + Markdown)
│       ├── SaveSummaryRecord.py        # Basic Firestore reference linking
│       ├── SaveSummaryRecordEnhanced.py # Enhanced Firestore with Zep/RAG references
│       ├── UpsertSummaryToZep.py       # Advanced Zep integration with full metadata
│       ├── ProcessSummaryWorkflow.py   # End-to-end workflow orchestration
│       └── generate_short_summary.py   # Legacy - maintained for compatibility
│
├── observability_agent/         # ObservabilityAgent - Comprehensive Operations Monitoring
│   ├── __init__.py
│   ├── observability_agent.py   # Agent definition for operational oversight and monitoring
│   ├── instructions.md          # Budget monitoring, error alerting, and operational workflows
│   └── tools/                   # 10 comprehensive monitoring, alerting, and analysis tools
│       ├── __init__.py
│       ├── format_slack_blocks.py       # Rich Slack Block Kit message formatting
│       ├── send_slack_message.py        # Slack API integration with channel management
│       ├── monitor_transcription_budget.py # $5 daily budget with 80% threshold alerts
│       ├── send_error_alert.py          # Error notifications with 1-per-hour throttling
│       ├── monitor_quota_state.py       # YouTube/AssemblyAI quota tracking with threshold alerts
│       ├── monitor_dlq_trends.py        # Dead letter queue pattern analysis and anomaly detection
│       ├── stuck_job_scanner.py         # Stale job detection across all agent collections
│       ├── report_daily_summary.py      # Comprehensive pipeline health reporting with Slack formatting
│       ├── llm_observability_metrics.py # Token usage tracking and cost analysis
│       └── alert_engine.py              # Centralized alert management with throttling and deduplication
│
├── core/                        # Shared Utilities and Infrastructure (TASK-53)
│   ├── __init__.py              # Core package initialization
│   ├── audit_logger.py          # TASK-AUDIT-0041: Centralized audit logging system
│   ├── reliability.py          # Dead letter queue and exponential backoff retry logic
│   ├── sheets.py               # Google Sheets integration utilities
│   ├── idempotency.py          # Core naming conventions and deduplication logic
│   ├── time_utils.py           # ISO 8601 timestamp handling and exponential backoff
│   └── slack_utils.py          # Slack channel normalization and Block Kit formatting
│
├── config/                      # Configuration Management System
│   ├── loader.py                # YAML configuration loader with validation
│   ├── settings.yaml            # Runtime settings: LLM, budgets, channels, business rules
│   ├── env_loader.py            # Environment variable validation with service-specific getters
│   └── test_config.py           # Configuration testing (legacy)
│
├── services/                    # External Services Configuration and Infrastructure
│   ├── firebase/                # Cloud Functions and Scheduling Infrastructure
│   │   ├── functions/           # Firebase Functions v2 for automated execution
│   │   │   ├── main.py          # Function entry points and routing
│   │   │   ├── scheduler.py     # Daily scheduling (01:00 CET) and budget monitoring
│   │   │   ├── core.py          # Shared utilities for cloud functions
│   │   │   ├── requirements.txt # Firebase-specific Python dependencies
│   │   │   ├── test_functions.py # Integration tests for cloud functions
│   │   │   ├── test_simple.py   # Simple function validation tests
│   │   │   └── readme.md        # Comprehensive Firebase deployment guide
│   │   └── deployment.md        # Firebase deployment instructions
│   └── firestore/               # Database Documentation and Configuration
│       └── indexes.md           # Firestore index documentation and rationale
│
├── scraper/                     # Legacy - maintained for compatibility
│   └── tools/
│       └── [legacy tool implementations]
│
├── tests/                       # Comprehensive Production Test Suite (70+ tests - TASK-54)
│   ├── __init__.py
│   ├── test_config.py           # Configuration loading tests (11 cases)
│   ├── test_env_loader.py       # Environment validation tests (17 cases)
│   ├── test_audit_logger.py     # TASK-AUDIT-0041: Audit logging tests (15 cases)
│   ├── test_idempotency.py      # Core utilities tests
│   ├── test_reliability.py      # Error handling and retry logic tests (22 cases)
│   ├── test_sheets.py           # Google Sheets integration tests (18 cases)
│   │
│   ├── # Scraper Agent Tests
│   ├── test_resolve_channel_handles.py
│   ├── test_list_recent_uploads.py
│   ├── test_read_sheet_links.py
│   ├── test_extract_youtube_from_page.py
│   ├── test_save_video_metadata.py
│   ├── test_enqueue_transcription.py
│   ├── test_remove_sheet_row.py
│   │
│   ├── # Transcriber Agent Tests (TASK-TRN-0022)
│   ├── test_get_video_audio_url.py      # Audio extraction tests (9 cases)
│   ├── test_submit_assemblyai_job.py    # Job submission tests (12 cases)
│   ├── test_poll_transcription_job.py   # Polling and exponential backoff (12 cases)
│   ├── test_store_transcript_to_drive.py # Drive storage with dual formats (11 cases)
│   ├── test_save_transcript_record.py   # Firestore metadata and transactions (12 cases)
│   │
│   ├── # Summarizer Agent Tests
│   ├── test_generate_short_summary.py   # TASK-SUM-0030: LLM integration (11 cases)
│   ├── test_store_short_in_zep.py       # TASK-SUM-0031: Zep GraphRAG storage
│   ├── test_store_short_summary_to_drive.py # TASK-SUM-0031: Dual Drive storage
│   ├── test_save_summary_record.py      # TASK-SUM-0031: Firestore reference linking
│   ├── test_save_summary_record_enhanced.py # TASK-ZEP-0006: Enhanced Zep integration
│   ├── test_upsert_summary_to_zep.py    # TASK-ZEP-0006: Advanced Zep features
│   ├── test_process_summary_workflow.py # TASK-ZEP-0006: End-to-end orchestration
│   ├── test_llm_observability.py       # TASK-LLM-0007: LLM configuration (10 cases)
│   ├── test_prompt_version_firestore.py # TASK-LLM-0007: Prompt versioning (6 cases)
│   │
│   ├── # Observability Agent Tests (TASK-AST-0040, TASK-OBS-0040/0041)
│   ├── test_format_slack_blocks.py      # Slack Block Kit formatting (12 cases)
│   ├── test_send_slack_message.py       # Slack API integration (10 cases)
│   ├── test_monitor_transcription_budget.py # Budget monitoring (12 cases)
│   ├── test_send_error_alert.py         # Error alerting and throttling (11 cases)
│   └── test_observability_ops.py        # Comprehensive ops suite (6 tools, 100% coverage)
│
├── planning/                    # Project Requirements and Task Documentation
│   ├── prd.mdc                  # Product Requirements Document
│   ├── tasks/                   # Active task specifications
│   │   ├── 50-architecture-orchestrator-suite.mdc
│   │   ├── 51-observability-alerts-tests.mdc
│   │   └── 52-configuration-env.mdc
│   └── archive/                 # Completed task specifications (30 archived)
│       ├── readme.md            # Archive overview and task completion status
│       ├── 00-config-yaml.mdc   # Configuration system
│       ├── 00-env-config.mdc    # Environment variables
│       ├── 01-scheduling-firebase.mdc
│       ├── 02-idempotency-naming.mdc
│       ├── 03-google-sheet-flow.mdc
│       ├── 04-reliability-quotas.mdc
│       ├── 05-agent-tools.mdc
│       ├── 53-code-quality-structure.mdc # TASK-53: Centralized utilities
│       ├── 54-testing-ci.mdc    # TASK-54: CI/CD and testing infrastructure
│       ├── 55-documentation-roadmap.mdc # TASK-55: Documentation and changelog
│       ├── 56-security-secrets.mdc # TASK-56: Security and service accounts
│       └── [26 other completed tasks...]
│
├── docs/                        # Implementation Documentation (Production Ready - TASK-55)
│   ├── agents_overview.md       # Detailed agent documentation and tool reference
│   ├── testing.md               # Complete testing guide with 70+ test coverage (TASK-54)
│   ├── environment.md           # Environment setup and API key management (TASK-56)
│   ├── claude.md                # Development guidance for Claude Code
│   ├── quick_overview.md        # Quick start guide for developers
│   ├── tasks.md                 # Project task completion status (updated)
│   ├── agency_manifesto.md      # Shared operational standards
│   ├── firebase_implementation.md # Firebase Functions deployment guide
│   ├── idempotency_implementation.md # Deduplication and naming conventions
│   ├── reliability_implementation.md # Error handling and retry systems
│   ├── sheets_implementation.md # Google Sheets integration patterns
│   └── audit_logging_implementation.md # TASK-AUDIT-0041 compliance documentation
│
├── changelog.md                 # Keep a Changelog format with version history (TASK-55)
└── readme.md                    # Main project overview and quick start
```

## Production Architecture Principles

### 1. Agency Swarm v1.0.0 Full Compliance
- **Agents**: All inherit from `agency_swarm.Agent` with proper ModelSettings
- **Tools**: All inherit from `agency_swarm.tools.BaseTool` (31 production tools)
- **Validation**: Comprehensive Pydantic Field validation throughout
- **Returns**: JSON string responses from all tool `run()` methods
- **Communication**: Proper agency_chart definition with CEO pattern

### 2. Event-Driven Broker Architecture
- **Firestore**: Primary data store and event broker for real-time coordination
- **Status Progression**: `discovered → transcription_queued → transcribed → summarized`
- **Atomic Transactions**: Data consistency across agent boundaries
- **Audit Logging**: TASK-AUDIT-0041 compliance with structured metadata

### 3. Multi-Platform Integration
- **APIs**: YouTube Data API, AssemblyAI, OpenAI GPT-4.1, Slack API, Zep GraphRAG
- **Storage**: Google Drive (dual formats), Firestore (structured data), Zep (semantic search)
- **Authentication**: Service accounts, environment variables, no hardcoded secrets
- **Monitoring**: Langfuse observability, structured logging, Slack alerts

### 4. Production-Ready Reliability
- **Error Handling**: Exponential backoff, dead letter queues, graceful degradation
- **Cost Controls**: $5/day transcription budget with 80% threshold alerts
- **Security**: Admin-only Firestore, PII avoidance, comprehensive audit trails
- **Testing**: 60+ comprehensive tests with mock-based isolation

## Agent Communication Architecture

### CEO Pattern (ScraperAgent)
```
ScraperAgent (CEO)
├── → TranscriberAgent (workflow pipeline)
│   └── → SummarizerAgent (content analysis)
├── ↔ ObservabilityAgent (bidirectional monitoring)
└── Direct communication with all agents
```

### Status-Driven Workflow
```
Video Discovery → Transcription Queue → Processing → Analysis → Complete
      ↓                ↓                   ↓           ↓         ↓
  ScraperAgent    TranscriberAgent    TranscriberAgent  SummarizerAgent  Done
```

## File Naming and Import Standards

### Tools (25 Production Tools)
```python
# PascalCase class names matching file names
class SaveVideoMetadata(BaseTool):  # in SaveVideoMetadata.py
class GenerateShortSummary(BaseTool):  # in GenerateShortSummary.py
```

### Agents (4 Production Agents)
```python
# Snake_case for directories and files
from scraper_agent import scraper_agent
from transcriber_agent import transcriber_agent
from summarizer_agent import summarizer_agent  
from observability_agent import observability_agent
```

### Configuration and Core
```python
# Centralized configuration management
from config.loader import load_app_config, get_config_value
from config.env_loader import get_required_var, get_api_key
from core.audit_logger import audit_logger
from core.reliability import DeadLetterQueue, QuotaManager
```

## Testing Architecture (60+ Comprehensive Tests)

### Test Distribution
- **Configuration**: 28 tests (config loading, environment validation)
- **Core Systems**: 22 tests (reliability, audit logging, idempotency)
- **Agent Tools**: 35+ tests per major workflow (transcription, summarization, alerts)
- **Integration**: Firebase functions, API integrations, end-to-end workflows

### Test Categories
```
Unit Tests (isolated functionality)
├── test_config.py (11 tests)
├── test_env_loader.py (17 tests)  
├── test_audit_logger.py (15 tests)
└── test_reliability.py (22 tests)

Integration Tests (API and service integration)
├── Transcriber Pipeline (56 tests across 5 tools)
├── Summarizer Workflows (47+ tests across 7 tools)  
├── Observability Monitoring (59+ tests across 10 tools)
└── Scraper Discovery (35+ tests across 7 tools)

End-to-End Tests
├── Firebase Functions
├── Complete Workflows
└── Error Recovery Scenarios
```

## Deployment Structure

### Required for Production
1. **Core Files**
   - `agency.py` - Main orchestration
   - `agency_manifesto.md` - Operational standards
   - All agent directories with tools
   - `config/settings.yaml` - Runtime configuration
   - `.env` - Environment variables (not in repo)

2. **Dependencies**
   - `requirements.txt` - Python packages
   - Service account credentials
   - API keys and authentication tokens

3. **Infrastructure** (Optional but Recommended)
   - Firebase Functions for scheduling (services/firebase/)
   - Firestore security rules and indexes (services/firestore/)
   - Google Drive folder structure

### Development Only
- `/tests/` directory
- `/planning/` documentation
- Implementation guides (*.md)
- Legacy compatibility files

## Configuration Hierarchy

### Runtime Configuration
1. **Environment Variables** (secrets, credentials)
2. **settings.yaml** (business rules, API settings, operational parameters)
3. **agency_manifesto.md** (shared operational standards)
4. **Agent instructions.md** (agent-specific workflows)

### Example Configuration
```yaml
# settings.yaml
scraper:
  handles: ["@AlexHormozi"]
  daily_limit_per_channel: 10

llm:
  default:
    model: "gpt-4.1" 
    temperature: 0.2
  tasks:
    summarizer_generate_short:
      max_output_tokens: 1500
      prompt_version: "v1"

budgets:
  transcription_daily_usd: 5.0

notifications:
  slack:
    channel: "ops-autopiloot"
```

## Security and Compliance

### Data Protection
- **No PII Processing**: Only public YouTube content
- **Audit Logging**: TASK-AUDIT-0041 compliance with structured metadata
- **Admin-Only Access**: Firestore security rules prevent client access
- **Environment Secrets**: All sensitive data via environment variables

### Access Control
- **Service Accounts**: Google Cloud services authentication
- **Minimal Scopes**: Drive and Sheets access only
- **API Key Rotation**: Environment-based configuration supports key updates
- **Throttling**: 1-alert-per-type-per-hour prevents notification spam

---

## Build Infrastructure (TASK-54)

### GitHub Actions CI/CD Pipeline
```
.github/workflows/ci.yml
├── Multi-Python Testing (3.9, 3.10, 3.11, 3.12)
├── Comprehensive External Service Mocking
├── Security Scanning (bandit, git-secrets)
├── Code Quality (flake8 with E501 exceptions)
└── Automated Testing (pytest with verbose coverage)
```

### External Service Mocking Strategy
- **YouTube API**: Mock google-api-python-client responses
- **AssemblyAI**: Mock requests with job progression simulation
- **Firestore**: Mock google-cloud-firestore with in-memory storage
- **Google Drive**: Mock googleapiclient with file operations
- **Slack**: Mock slack_sdk with channel and messaging
- **Zep**: Mock zep-python with document storage

---

**Architecture Status**: Production Ready ✅  
**Latest Update**: 2025-09-15  
**Total Tools**: 31 across 4 agents  
**Test Coverage**: 70+ comprehensive tests (TASK-54)  
**CI/CD Pipeline**: GitHub Actions with multi-version support (TASK-54)  
**Framework Compliance**: Agency Swarm v1.0.0 ✅  
**Final Tasks Completed**: 53-56 (Code Quality, Testing, Documentation, Security)