---
description: Agency Swarm v1.0.0 Compliant Folder Structure
globs:
alwaysApply: true
---

# Autopiloot Agency Folder Structure

## Agency Swarm v1.0.0 Compliant Organization

```
autopiloot/
├── agency.py                     # Main AutopilootAgency class inheriting from Agency
├── agency_manifesto.md           # Shared instructions and operational standards
├── requirements.txt              # Dependencies including agency-swarm>=0.7.2
├── env.template                  # Environment variable reference documentation
│
├── scraper_agent/               # ScraperAgent (CEO) - YouTube Discovery
│   ├── __init__.py              # Package initialization with agent export
│   ├── scraper_agent.py         # Agent definition with ModelSettings
│   ├── instructions.md          # Agent-specific instructions and workflow
│   └── tools/                   # Agency Swarm v1.0.0 compliant tools
│       ├── __init__.py
│       ├── ResolveChannelHandles.py    # Batch YouTube handle resolution
│       ├── ListRecentUploads.py        # Uploads playlist discovery
│       ├── ReadSheetLinksSimple.py     # Google Sheets URL extraction
│       ├── ExtractYouTubeFromPage.py   # Web page YouTube discovery
│       ├── SaveVideoMetadata.py        # Firestore video persistence
│       ├── EnqueueTranscription.py     # Job queue management
│       └── RemoveSheetRow.py           # Sheet cleanup with archival
│
├── transcriber_agent/           # TranscriberAgent - AssemblyAI Processing
│   ├── __init__.py
│   ├── transcriber_agent.py     # Agent definition with temperature=0.1
│   ├── instructions.md          # Transcription workflow and controls
│   └── tools/                   # Complete AssemblyAI pipeline (TASK-TRN-0022)
│       ├── __init__.py
│       ├── get_video_audio_url.py      # YouTube audio stream extraction (yt-dlp)
│       ├── submit_assemblyai_job.py    # Job submission with cost estimation & webhook
│       ├── poll_transcription_job.py   # Exponential backoff polling with timeout caps
│       ├── store_transcript_to_drive.py # Dual format storage (TXT+JSON) with digest
│       └── save_transcript_record.py   # Atomic Firestore transactions with status progression
│
├── summarizer_agent/            # SummarizerAgent - Content Summarization
│   ├── __init__.py
│   ├── summarizer_agent.py      # Agent definition with temperature=0.3
│   ├── instructions.md          # Summarization guidelines
│   └── tools/                   # Summary generation and storage
│       ├── __init__.py
│       ├── GenerateShortSummary.py     # Coaching-focused LLM summaries with adaptive chunking
│       ├── StoreShortInZep.py         # Basic Zep GraphRAG storage (TASK-SUM-0031)
│       ├── UpsertSummaryToZep.py      # Enhanced Zep integration with full metadata (TASK-ZEP-0006)
│       ├── StoreShortSummaryToDrive.py # Dual-format Google Drive storage (JSON + Markdown)
│       ├── SaveSummaryRecord.py       # Basic Firestore reference linking
│       ├── SaveSummaryRecordEnhanced.py # Enhanced Firestore with Zep/RAG refs (TASK-ZEP-0006)
│       └── ProcessSummaryWorkflow.py  # End-to-end workflow orchestration
│
├── assistant_agent/             # AssistantAgent - Monitoring & Alerts
│   ├── __init__.py
│   ├── assistant_agent.py       # Agent definition with temperature=0.1
│   ├── instructions.md          # Operational oversight guidelines
│   └── tools/                   # Notification and monitoring tools
│       ├── __init__.py
│       ├── monitor_transcription_budget.py # $5 daily budget tracking
│       ├── send_slack_message.py       # Slack notifications
│       ├── send_error_alert.py         # Critical error alerts
│       └── format_slack_blocks.py      # Rich message formatting
│
├── config/                      # Configuration Management
│   ├── loader.py                # YAML configuration loader
│   ├── settings.yaml            # System settings and parameters
│   └── env_loader.py            # Environment variable validation
│
├── firebase/                    # Firebase Functions & Scheduling
│   ├── functions/
│   │   ├── main.py              # Function entry points
│   │   ├── scheduler.py         # Scheduled and event-driven functions
│   │   ├── core.py              # Core utilities
│   │   └── requirements.txt    # Firebase-specific dependencies
│   └── DEPLOYMENT.md            # Deployment instructions
│
├── firestore/                   # Database Configuration
│   └── indexes.md               # Firestore composite indexes
│
├── tests/                       # Comprehensive Test Suite
│   ├── __init__.py
│   ├── test_config.py           # Configuration loading tests
│   ├── test_env_loader.py       # Environment validation tests  
│   ├── test_get_video_audio_url.py # Audio extraction tests (9 cases)
│   ├── test_submit_assemblyai_job.py # Job submission tests (12 cases)
│   ├── test_poll_transcription_job.py # Polling & backoff tests (12 cases)
│   ├── test_store_transcript_to_drive.py # Drive storage tests (11 cases)
│   ├── test_save_transcript_record.py # Firestore metadata tests (12 cases)
│   └── test_remove_sheet_row.py # Sheet management tests
│
├── planning/                    # Project Documentation
│   ├── prd.mdc                  # Product Requirements Document
│   └── tasks/                   # Task specifications
│       ├── *.mdc                # Individual task documents
│       └── 15-scraper-remove-sheet-rows.mdc
│
└── *.md                         # Implementation documentation
    ├── README.md
    ├── ENVIRONMENT.md
    ├── FIREBASE_IMPLEMENTATION.md
    ├── IDEMPOTENCY_IMPLEMENTATION.md
    ├── RELIABILITY_IMPLEMENTATION.md
    ├── SHEETS_IMPLEMENTATION.md
    └── TESTING.md
```

## Key Architectural Principles

### 1. Agency Swarm v1.0.0 Compliance
- All agents inherit from `agency_swarm.Agent`
- All tools inherit from `agency_swarm.tools.BaseTool`
- Pydantic field validation for all tool parameters
- JSON string returns from all tool `run()` methods

### 2. Agent Naming Convention
- Lowercase with underscores: `scraper_agent/`, `transcriber_agent/`
- Agent class names: `scraper_agent`, `transcriber_agent`
- Consistent `__init__.py` exports for clean imports

### 3. Tool Organization
- One tool per file with descriptive class names
- Tools grouped by agent in `{agent_name}/tools/` directories
- All tools use environment variables for secrets (no hardcoded values)
- Comprehensive test blocks in each tool file

### 4. Communication Flow
```
ScraperAgent (CEO) ←→ All Agents
ScraperAgent → TranscriberAgent → SummarizerAgent
AssistantAgent ←→ All Agents (monitoring/alerts)
```

### 5. Configuration Hierarchy
- Environment variables (`.env` or system) for secrets
- `settings.yaml` for business rules and parameters
- `agency_manifesto.md` for shared operational standards
- Agent-specific `instructions.md` for workflows

### 6. Testing Structure
- Unit tests in `/tests/` directory with 145+ total test cases
- Test files follow `test_{component}.py` naming convention
- Mock-based testing avoiding external API dependencies
- Comprehensive coverage: tools, configuration, reliability, and validation
- TASK-TRN-0022 tools: 35 test cases across 3 tools with error scenarios
- TASK-SUM-0030 tools: 11 test cases for GenerateShortSummary with LLM integration
- TASK-SUM-0031 tools: 31 test cases across 3 tools for multi-platform storage
- TASK-ZEP-0006 tools: 47 test cases across 4 tools for enhanced Zep GraphRAG integration

## File Naming Standards

### Tools
- PascalCase for class names matching file names
- Example: `RemoveSheetRow.py` contains `class RemoveSheetRow`

### Agents
- Snake_case for directories: `scraper_agent/`
- Snake_case for agent files: `scraper_agent.py`
- Agent variable names: `scraper_agent = Agent(...)`

### Tests
- Prefix with `test_`: `test_remove_sheet_row.py`
- Test classes: `TestRemoveSheetRow`

## Import Patterns

```python
# Agent imports
from scraper_agent import scraper_agent
from transcriber_agent import transcriber_agent

# Tool imports (within agent)
from agency_swarm.tools import BaseTool

# Configuration imports
from config.loader import get_config_value
from config.env_loader import get_api_key
```

## Deployment Structure

### Required Files
1. `agency.py` - Main agency orchestration
2. `agency_manifesto.md` - Shared instructions
3. `*/tools/*.py` - All tool implementations
4. `requirements.txt` - Python dependencies
5. `.env` - Environment variables (not in repo)

### Optional Files
- Firebase functions for scheduling
- Test files for development
- Planning documents for reference
- Implementation documentation
